<Project Sdk="Microsoft.NET.Sdk">

  <!-- Common settings for all target frameworks and platforms -->
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFrameworks>netcoreapp3.1;net5.0</TargetFrameworks>
    <RootNamespace>csharp_example_extension</RootNamespace>
    <LangVersion>latest</LangVersion>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
  </PropertyGroup>

  <!-- Disable PDB file creation for Release configuration -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <DebugType>None</DebugType>
  </PropertyGroup>

  <!-- Include Lambda Extension hook script into the output for AnyCPU builds, since they depend on a preinstalled .NET Core Runtime -->
  <ItemGroup Condition=" '$(Platform)' == 'AnyCPU' "> 
    <Content Include="extensions/csharp-example-extension"> 
      <CopyToOutputDirectory>Always</CopyToOutputDirectory> 
    </Content> 
  </ItemGroup>

  <!-- This is x64 specific - result is published as a single self-contained file, so that it doesn't need .NET runtime to be preinstalled on the VM -->
  <PropertyGroup Condition=" '$(Platform)' == 'x64' ">
    <PublishTrimmed>true</PublishTrimmed>
    <PublishSingleFile>true</PublishSingleFile>
    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>
  </PropertyGroup>

  <!-- Custom step for moving self-contained executable into extensions folder, so that Lambda Extensions runtime can invoke it directly -->
  <Target Name="RenameExtensionHook" AfterTargets="Publish" Condition=" '$(PublishSingleFile)' == 'true' ">
    <Move SourceFiles="$(PublishDir)/csharp-example-extension" DestinationFiles="$(PublishDir)/extensions/csharp-example-extension" OverwriteReadOnlyFiles="true" />
  </Target>
</Project>
