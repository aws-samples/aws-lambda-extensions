11a12
> 	"strconv"
12a14
> 	"time"
14,15c16,17
< 	"aws-lambda-extensions/go-example-logs-api-extension/agent"
< 	"aws-lambda-extensions/go-example-logs-api-extension/extension"
---
> 	"aws-lambda-extensions/go-example-adaptive-batching/agent"
> 	"aws-lambda-extensions/go-example-adaptive-batching/extension"
23a26
> 
55a59,61
> 	// Number of bytes the logger has handled. Explicit int64 usage to allow
> 	// logs greater than 4 gb to be stored.
> 	var bytesHandled int64 = 0
57a64
> 		logger.Infof("%sFlush Queue", printPrefix)
64c71,74
< 			err = logsApiLogger.PushLog(fmt.Sprintf("%v", logs[0]))
---
> 			logString := fmt.Sprintf("%v", logs[0])
> 			// Calculate the number of bytes in the log string, add to bytes
> 			bytesHandled += int64(len(logString))
> 			err = logsApiLogger.PushLog(logString)
85a96,137
> 	// The rate at which logs are being shifted. Once enough logs have been met to satisfy
> 	// one of these conditions the logs are shipped to S3.
> 	shipRateBytes := 1024 * 4 // The maximum number of bytes between shipping logs. 4kb logs
> 	shipRateInvokes := 10     // Maximum number of invokes since last time logs were shipped
> 	shipRateSeconds := 60     // Maximum amount of time between shipping logs
> 
> 	// Helper function to fetch an environment variable if it exists
> 	setRate := func(variable string, destination *int) {
> 		// Fetch environment variable
> 		valueString, present := os.LookupEnv(variable)
> 
> 		// Verify it exists
> 		if !present {
> 			logger.Infof("%s%s not set. Using default value %d.", printPrefix, variable, *destination)
> 			return
> 		}
> 
> 		valueInteger, conversionError := strconv.Atoi(valueString)
> 
> 		// Check if conversion fails
> 		// Do nothing if it does
> 		if conversionError != nil {
> 			logger.Infof("%sUnable to convert %s to integer. Using default value %d.",
> 				printPrefix, variable, *destination)
> 			return
> 		}
> 
> 		// Set the new value
> 
> 		*destination = valueInteger
> 		logger.Infof("%s%s set to %d", printPrefix, variable, *destination)
> 	}
> 
> 	// Set the proper log shipping rates
> 	setRate("ADAPTIVE_BATCHING_EXTENSION_SHIP_RATE_BYTES", &shipRateBytes)
> 	setRate("ADAPTIVE_BATCHING_EXTENSION_SHIP_RATE_INVOKES", &shipRateInvokes)
> 	setRate("ADAPTIVE_BATCHING_EXTENSION_SHIP_RATE_SECONDS", &shipRateSeconds)
> 
> 	lastShipTime := time.Now()
> 	bytesHandled = 0
> 	invokesHandled := 0
> 
94a147
> 
100,101c153,168
< 			// Flush log queue in here after waking up
< 			flushLogQueue()
---
> 
> 			// Count number of invokes
> 			invokesHandled++
> 			// Count the amount of time ellapsed since the last time logs were sent
> 			timeElapsed := int(time.Now().Sub(lastShipTime) / 1e9)
> 
> 			// Check if any of the conditions to ship logs have been met
> 			if (invokesHandled >= shipRateInvokes) || (timeElapsed >= shipRateSeconds) || (bytesHandled >= int64(shipRateBytes)) {
> 				// Flush log queue in here after waking up
> 				flushLogQueue()
> 				// Reset environment counters
> 				invokesHandled = 0
> 				lastShipTime = time.Now()
> 				bytesHandled = 0
> 			}
> 
109a177
> 
